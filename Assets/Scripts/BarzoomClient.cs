using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using System.Text.RegularExpressions;
using Dpoch.SocketIO;
using System;
using UnityEngine;


public class DataPayload
{
    public string resource_name = null;
    public string pos_x = null;
    public string pos_y = null;
    public string pos_z = null;
    public string rot_w = null;
    public string rot_x = null;
    public string rot_y = null;
    public string rot_z = null;
    public string action = null;
    public string instance_id = "0";
    public string source_instance_id = "0";
}

public class BarzoomClient : MonoBehaviour {

    /// 
    /// Development: dev-barzoom.herokuapp.com
    /// Acceptance: acpt-barzoom.herokuapp.com
    /// Production: prod-barzoom.herokuapp.com
    /// 
    private SocketIO socket = new SocketIO("ws://acpt-barzoom.herokuapp.com:80/socket.io/?EIO=4&transport=websocket");

    /// 
    /// Autogenerated when in Development or Acceptance
    /// To use Production, sign up at https://prod-orcus.herokuapp.com
    ///
    private string lobbyKey = null;  // autogenerated when in development or acceptance

    private string testRoom = "";

    private float timeSinceLastRequest = 0;
    
 

    private List<GameObject> localGameObjects = new List<GameObject>();

    private List<string> memberNames = new List<string>();
    private List<string> readyMemberNames = new List<string>();
    private bool isLeader = false;

    // GameObjects created because we are the leader, are referenced here
    private Dictionary<int, GameObject> localInstanceID2GameObject = new Dictionary<int, GameObject>();

    // GameObjects created because we are not the leader, are referenced here
    public Dictionary<int, GameObject> remoteInstanceID2GameObject = new Dictionary<int, GameObject>();
    public Dictionary<int, int> localInstanceID2SourceInstanceID = new Dictionary<int, int>();

    private OrcusClientState clientState = OrcusClientState.IDLE;

    private float timeOut = 2.0f;


    [SerializeField]
    public GameObject sharedCubePrefab;



    enum OrcusClientState
    {
        IDLE,
        GENERATE_LOBBY_KEY,
        LOGIN,
        JOIN,
        INIT,
        WAITING,
        VISITOR,
        START_EXPERIENCE,
        SHARING_EXPERIENCE,
        END_EXPERIENCE
    }

    enum OrcusPayloadState
    {
        NOP = 0,
        AWAKEN,
        START,
        UPDATE,
        DESTRUCT 
    }

    public static BarzoomClient client = null;


    /// 
    /// Called by the ActsAsBarzoomable script
    ///
    public void SyncGameObject(string resourceName, GameObject gameObject, bool awaken = false, bool start = false, bool update = false, bool destruct = false)
    {
    
        Vector3 position = gameObject.GetComponent<Rigidbody>().transform.position;
        Quaternion rotation = gameObject.GetComponent<Rigidbody>().transform.rotation;
        int instanceID = gameObject.GetInstanceID();

        var payload = new DataPayload() {
            resource_name = resourceName,
            pos_x = position.x.ToString(),
            pos_y = position.y.ToString(),
            pos_z = position.z.ToString(),
            rot_w = rotation.w.ToString(),
            rot_x = rotation.x.ToString(),
            rot_y = rotation.y.ToString(),
            rot_z = rotation.z.ToString(),
            instance_id = instanceID.ToString(),
            action = "0"    // NOP
        };

        if (awaken)
        {
            /// 
            /// A local GameObject has just awoken, set the source_instance_id 
            ///
            Debug.Log("A local GameObject has just awoken, set the source_instance_id=" + instanceID );
            localInstanceID2GameObject[instanceID] = gameObject;
            payload.source_instance_id = instanceID.ToString();
            payload.action = "1";   // Awaken  
         }
        else if (start)
        {
            /// 
            /// A local GameObject has just started, set the source_instance_id 
            ///
            Debug.Log("A local GameObject has just started, set the source_instance_id=" + instanceID);
            payload.source_instance_id = instanceID.ToString();
            payload.action = "2";   // Start
       } else if (update)
        {
            

            if (localInstanceID2GameObject.ContainsKey(instanceID))
            {
                Debug.Log("A local GameObject has just moved, set the source_instance_id=" + instanceID);
                payload.source_instance_id = instanceID.ToString();
            }

            if (localInstanceID2SourceInstanceID.ContainsKey(instanceID))
            {
                int sourceInstanceID = localInstanceID2SourceInstanceID[instanceID];
                Debug.Log("A remote GameObject has just moved, set the source_instance_id=" + sourceInstanceID);
                payload.source_instance_id = sourceInstanceID.ToString();
            }
            payload.action = "3";   // Update
        }
        else if (destruct)
        {
            DataPayload destructPayload = new DataPayload()
            {
                resource_name = resourceName,
                instance_id = gameObject.GetInstanceID().ToString(),
                action = "4"   // Destruct
            };

            if (localInstanceID2GameObject.ContainsKey(instanceID))
            {
                Debug.Log("A local GameObject is going to be destroyed, set the source_instance_id=" + instanceID);
                destructPayload.source_instance_id = instanceID.ToString();
            }

            if (localInstanceID2SourceInstanceID.ContainsKey(instanceID))
            {
                int sourceInstanceID = localInstanceID2SourceInstanceID[instanceID];
                Debug.Log("A remote GameObject is going to be destroyed, set the source_instance_id=" + sourceInstanceID);
                destructPayload.source_instance_id = sourceInstanceID.ToString();
            }



            socket.Emit("/data", lobbyKey + "," + 
                        destructPayload.action + "," + 
                        destructPayload.resource_name + "," + 
                        destructPayload.instance_id + "," +
                        destructPayload.source_instance_id);
            return;
        } else {
            Debug.Log("Unknown action!?");
            return;
        }
        socket.Emit("/data", lobbyKey + "," + 
                    payload.action + "," + 
                    payload.resource_name + "," + 
                    payload.instance_id + "," +
                    payload.source_instance_id + "," +
                    payload.pos_x + "," + 
                    payload.pos_y + "," + 
                    payload.pos_z + "," +
                    payload.rot_w + "," + 
                    payload.rot_x + "," + 
                    payload.rot_y + "," + 
                    payload.rot_z );
    }

    public void ConnectToAcceptanceServer()
    {
        clientState = OrcusClientState.GENERATE_LOBBY_KEY;
    }

    public void ConnectToProductionServer()
    {
        clientState = OrcusClientState.LOGIN;
    }

    public void EndSharedExperience()
    {
        clientState = OrcusClientState.END_EXPERIENCE;
    }

    private void instantiatePrefabsIntoLocalGameObjects()
    {

        UnityEngine.Object[] indexables = Resources.LoadAll("GameObjects", typeof(GameObject));
        List<UnityEngine.Object> prefabs = new List<UnityEngine.Object>(indexables);

        foreach (var obj in prefabs)
        {
            GameObject prefab = obj as GameObject;
            GameObject gameObject = Instantiate(prefab, Vector3.zero, Quaternion.identity) as GameObject;

            gameObject.AddComponent<ActsAsBarzoomable>();
            ActsAsBarzoomable aab = gameObject.GetComponent<ActsAsBarzoomable>();
            aab.resourceName = gameObject.name;

            gameObject.AddComponent<Placeable>();
            Placeable placeable = gameObject.GetComponent<Placeable>();
            placeable.onHoverMaterial = Resources.Load("Materials/Hovered") as Material;
            placeable.onSelectedMaterial = Resources.Load("Materials/Selected") as Material;


            gameObject.AddComponent<Rigidbody>();
            Rigidbody rigidbody = gameObject.GetComponent<Rigidbody>();
            rigidbody.mass = 1.0f;
            rigidbody.drag = 0f;
            rigidbody.angularDrag = 0.05f;
            rigidbody.useGravity = true;
            rigidbody.isKinematic = false;
            rigidbody.interpolation = RigidbodyInterpolation.None;
            rigidbody.collisionDetectionMode = CollisionDetectionMode.Discrete;
            rigidbody.constraints = RigidbodyConstraints.FreezeAll;
           

            localGameObjects.Add(gameObject);
                
            gameObject.SetActive(true);
        }
    }

    private void calculateTestRoomName()
    {
        DateTime now = DateTime.Now;

        ///
        /// Create a test room based upon the year, month, and day
        ///
        testRoom = "T" + now.Year.ToString() + now.Month.ToString() + now.Day.ToString();
    }

    private void Awake()
    {
        BarzoomClient.client = this;
        
        calculateTestRoomName();

        /// 
        /// Connect to Acceptance (Staging Server) for testing
        ///
        ConnectToAcceptanceServer();
    }



    void Start () {

        Debug.Log("Ready");

        socket.OnOpen += () => {

            /// 
            ///  clientState = OrcusClientState.IDLE;
            ///
        };

        socket.On("/generate_lobby_key_ok", (ev) => {
            Debug.Log("GENERATE_LOBBY_KEY_OK");

            lobbyKey = ev.Data[0].ToObject<string>();

            clientState = OrcusClientState.LOGIN;
        });

        socket.On("/login_ok", (ev) => {
            Debug.Log("LOGIN_OK");

            clientState = OrcusClientState.JOIN;
        });

        socket.On("/join_ok", (ev) => {
            Debug.Log("JOIN_OK");
            socket.Emit("/members", lobbyKey);
            
        });


        socket.On("/info_ok", (ev) => {
            string myString = ev.Data[0].ToObject<string>();
            Debug.Log(myString);


        });

        socket.On("/warn_ok", (ev) => {
            string myString = ev.Data[0].ToObject<string>();
            Debug.Log(myString);


        });

        socket.On("/debug_ok", (ev) => {
            string myString = ev.Data[0].ToObject<string>();
            Debug.Log(myString);


        });

        socket.On("/pong", (ev) => {
            string myString = ev.Data[0].ToObject<string>();
            //Debug.Log("Received pong");


        });

        socket.On("/members_ok", (ev) => {
            //Debug.Log("MEMBERS_OK");
            string myString = ev.Data[0].ToObject<string>();
            memberNames = new List<string>();
            memberNames.AddRange(JsonHelper.getJsonArray<string>(myString));
            //Debug.Log("members =" + myString);

            if (clientState == OrcusClientState.JOIN)
            {
                clientState = OrcusClientState.INIT;
            }
        });

        socket.On("/whois_ready_ok", (ev) => {
            Debug.Log("WHOIS_READY_OK");
            string myString = ev.Data[0].ToObject<string>();
            readyMemberNames = new List<string>();
            readyMemberNames.AddRange(JsonHelper.getJsonArray<string>(myString));
            Debug.Log("ready =" + myString);

        });

        socket.On("/player_ready_ok", (ev) => {
            Debug.Log("PLAYER_READY_OK");
            //string myString = ev.Data[0].ToObject<string>();
            //readyMemberNames = JsonHelper.getJsonArray<string>(myString);
            //Debug.Log("ready =" + readyMemberNames);
            clientState = OrcusClientState.WAITING;
        });

        socket.On("/start_experience_ok", (ev) => {
            Debug.Log("START_EXPERIENCE_OK");
            clientState = OrcusClientState.START_EXPERIENCE;
        });



        socket.On("/data_ok", (ev) => {

            // Do not accept any incoming data until we are ready
            if (clientState != OrcusClientState.SHARING_EXPERIENCE)
            {
                return;
            }

            string json = ev.Data[0].ToObject<string>();


            // Ignore the empty dictionary that the Server sends back in response to a /data sent by the Client
            if (json == "{}")
            {
                return;
            }


            string[] paramsArray = json.Split(',');
            List<string> parameters = new List<string>(paramsArray);

            int act = 0;
            try
            {
                act = Int32.Parse(parameters[0]);
            }
            catch (FormatException e)
            {
                Debug.Log("Unable to parse action." + e + " - Skipping /data frame: " + json);
                return;
            }


            //parametersstring resourceName = parameters[1];
            int remoteInstanceID = Int32.Parse(parameters[2]);
            int sourceInstanceID = Int32.Parse(parameters[3]);


            switch (act)
            {
                case 1:
                    // Awake
                    Debug.Log("AWAKENING: remoteID=" + remoteInstanceID + " sourceID=" + sourceInstanceID);
                    GameObject awakeGo = createFromPayload(parameters);
                    break;
                case 2:
                    // Start
                    Debug.Log("STARTING: remoteID=" + remoteInstanceID + " sourceID=" + sourceInstanceID);
                    GameObject startGo = createGameObjectReferencedByRemoteInstanceID(remoteInstanceID);
                    startGo.SetActive(true);
                    break;
                case 3:
                    // Update
                    Debug.Log("UPDATE ATTEMPT: remoteID=" + remoteInstanceID + " sourceID=" + sourceInstanceID);
                    if (remoteInstanceID2GameObject.ContainsKey(remoteInstanceID))
                    {
                        Debug.Log("UPDATE SUCCESS REMOTE INSTANCE : remoteID=" + remoteInstanceID + " sourceID=" + sourceInstanceID);
                        fixedUpdateOfGameObjectReferencedByRemoteInstanceID(remoteInstanceID, parameters);
                    }
                    else if (localInstanceID2GameObject.ContainsKey(sourceInstanceID))
                    {
                        Debug.Log("UPDATE SUCCESS OWNED INSTANCE: remoteID=" + remoteInstanceID + " sourceID=" + sourceInstanceID);
                        Vector3 position = new Vector3(float.Parse(parameters[4]),
                                           float.Parse(parameters[5]),
                                           float.Parse(parameters[6]));
                        Quaternion quaternion = Quaternion.Euler(float.Parse(parameters[8]),
                                                                 float.Parse(parameters[9]),
                                                                 float.Parse(parameters[10]));

                        GameObject go = localInstanceID2GameObject[sourceInstanceID] as GameObject;


                        ///  ActsAsBarzoomable will update the position and rotation on the next update cycle.
                        ActsAsBarzoomable actsAsBarzoomable = go.GetComponent<ActsAsBarzoomable>();
                        actsAsBarzoomable.scheduleReflectionUpdate(position, quaternion);

                        
                    } else {
                        // Entered an already running Shared Experience, just instantiate the game object that is
                        // currently in play.
                        GameObject gameObject = createFromPayload(parameters);
                        gameObject.SetActive(true);
                    }  
                    break;
                case 4:
                    // Fixed Update
                    Debug.Log("DESTRUCT ATTEMPT: remoteID=" + remoteInstanceID + " sourceID=" + sourceInstanceID);
                    if (remoteInstanceID2GameObject.ContainsKey(remoteInstanceID))
                    {
                        Debug.Log("DESTRUCT SUCCESS REMOTE INSTANCE : remoteID=" + remoteInstanceID + " sourceID=" + sourceInstanceID);
                        DestroyGameObjectWithRemoteInstanceID(remoteInstanceID);
                    }
                    else if (localInstanceID2GameObject.ContainsKey(sourceInstanceID))
                    {

                        Debug.Log("DESTRUCT SUCCESS OWNED INSTANCE: remoteID=" + remoteInstanceID + " sourceID=" + sourceInstanceID);
                        GameObject gameObject = localInstanceID2GameObject[sourceInstanceID] as GameObject;
                        Destroy(gameObject);


                    }
                    else
                    {
                        // Entered an already running Shared Experience, just instantiate the game object that is
                        // currently in play.
                        GameObject gameObject = createFromPayload(parameters);
                        gameObject.SetActive(true);
                    }
                    
                    break;
                default:
                    break;
            }

        });




        socket.OnConnectFailed += () => Debug.Log("Socket failed to connect!");
        socket.OnClose += () => Debug.Log("Socket closed!");
        socket.OnError += (err) => Debug.Log("Socket Error: " + err);

        socket.Connect();
	}

 

    // Update is called once per frame
    void Update () {

        // Every .33 seconds
        timeSinceLastRequest += Time.deltaTime;
        if (timeSinceLastRequest > timeOut)
        {


            timeSinceLastRequest = 0f;

            socket.Emit("/ping", "hello");
            //Debug.Log("Sent ping");


            switch (clientState)
            {
                case OrcusClientState.IDLE:
                {
                        ;   // No operation
                }
                break;
                case OrcusClientState.GENERATE_LOBBY_KEY:
                    {
                        // This message will only work with dev-barzoom or acpt-barzoom
                        socket.Emit("/generate_lobby_key", "");
                    }
                    break;
                case OrcusClientState.LOGIN:
                    {

                        Debug.Log("LOGIN");
                        socket.Emit("/login", lobbyKey);

                    }
                    break;
                case OrcusClientState.JOIN:
                    {
                        Debug.Log("JOIN");
                        socket.Emit("/join", lobbyKey + "," + testRoom);

                    }
                    break;
                case OrcusClientState.INIT: 
                    {
                        Debug.Log("INIT");


                        // Initialize, pre Experience

                        socket.Emit("/player_ready", lobbyKey);

                    }
                    break;
                case OrcusClientState.WAITING:
                    {
                        Debug.Log("WAITING");

                        socket.Emit("/members", lobbyKey);
                        socket.Emit("/whois_ready", lobbyKey);

                        if (!isLeader)
                        {
                            isLeader = (memberNames.Count == 1);
                        }

                        bool isEveryoneReady = (memberNames.Count == readyMemberNames.Count && memberNames.Count > 1);

                        if (isEveryoneReady)  
                        {

                            if (isLeader)
                            {
                                // Starting the MagicVerse
                                socket.Emit("/start_experience", lobbyKey + ", " + "{}");
                            } else {


                                // Rejoining shared experience in progress
                                clientState = OrcusClientState.SHARING_EXPERIENCE;
                            }



                        } 
                    }
                    break;
                case OrcusClientState.START_EXPERIENCE:
                    {
                        Debug.Log("START_EXPERIENCE");
                        if (isLeader)  //isLeader
                        {
                            // Initialize the experience, as Leader
                            instantiatePrefabsIntoLocalGameObjects();

                        } else {
                            // We're not the leader, however we will automatically
                            // build the scene, as we respond to incoming /data payloads
                        }


                        clientState = OrcusClientState.SHARING_EXPERIENCE;
                    }
                    break;
                case OrcusClientState.SHARING_EXPERIENCE:
                    {
                        
                        // Become leader if I am the only player in the Room
                        if (!isLeader)
                        {
                            socket.Emit("/members", lobbyKey);
                            isLeader = (memberNames.Count == 1);
                        }

                        //Debug.Log("SHARING_EXPERIENCE");
                    }
                    break;
                case OrcusClientState.END_EXPERIENCE:
                    {
                        Debug.Log("END_EXPERIENCE");
                    }
                    break;
                default:
                    break;
            }            
        }



    }



    protected GameObject createFromPayload(List<string> payload)
    {

        Debug.Log("GameObject createFromPayload(List<string> payload");


        //  payload.action              0
        //  payload.resource_name       1
        //  payload.instance_id         2
        //  payload.source_instance_id  3
        //  payload.pos_x               4
        //  payload.pos_y               5
        //  payload.pos_z               6
        //  payload.rot_w               7
        //  payload.rot_x               8
        //  payload.rot_y               9
        //  payload.rot_z               10            

        GameObject go = UnityEngine.Object.Instantiate(Resources.Load(payload[1]),  // Instance name
                                                new Vector3(float.Parse(payload[4]),
                                                            float.Parse(payload[5]),
                                                            float.Parse(payload[6])),
                                                       Quaternion.identity) as GameObject;

        int remoteInstanceID = Int32.Parse(payload[2]);
        remoteInstanceID2GameObject[remoteInstanceID] = go;

        int sourceInstanceID = Int32.Parse(payload[3]);
        localInstanceID2SourceInstanceID[go.GetInstanceID()] = sourceInstanceID;
        return go;
    }

    protected GameObject createGameObjectReferencedByRemoteInstanceID(int remoteInstanceID)
    {

        Debug.Log("GameObject createGameObjectReferencedByRemoteInstanceID(int remoteInstanceID)");
        GameObject go = remoteInstanceID2GameObject[remoteInstanceID] as GameObject;
        return go;
    }

    protected GameObject fixedUpdateOfGameObjectReferencedByRemoteInstanceID(int remoteInstanceID, List<string> payload)
    {
        Debug.Log("GameObject fixedUpdateOfGameObjectReferencedByRemoteInstanceID(int remoteInstanceID, List<string> payload)");
        Vector3 position = new Vector3(float.Parse(payload[4]),
                                       float.Parse(payload[5]),
                                       float.Parse(payload[6]));
        Quaternion quaternion = Quaternion.Euler(float.Parse(payload[8]),
                                                 float.Parse(payload[9]),
                                                 float.Parse(payload[10]));

        GameObject go = remoteInstanceID2GameObject[remoteInstanceID] as GameObject;

        ///  ActsAsBarzoomable will update the position and rotation on the next update cycle.
        ActsAsBarzoomable actsAsBarzoomable = go.GetComponent<ActsAsBarzoomable>();
        actsAsBarzoomable.scheduleReflectionUpdate(position, quaternion);


        return go;
    }

    protected void DestroyGameObjectWithRemoteInstanceID(int remoteInstanceID)
    {
        Destroy(remoteInstanceID2GameObject[remoteInstanceID] as GameObject);
    }
}


public class JsonHelper
{
    //Usage:
    //YouObject[] objects = JsonHelper.getJsonArray<YouObject> (jsonString);
    public static T[] getJsonArray<T>(string json)
    {

        // Incoming strings are escaped, we must escape them
        Regex regex = new Regex(@"");
        string result = Regex.Unescape(json);
        string cookedJson = result.Trim('"');

        string newJson = "{ \"array\": " + cookedJson + "}";
        

        Wrapper<T> wrapper = JsonUtility.FromJson<Wrapper<T>>(newJson);
        return wrapper.array;
    }

    //Usage:
    //string jsonString = JsonHelper.arrayToJson<YouObject>(objects);
    public static string arrayToJson<T>(T[] array)
    {
        Wrapper<T> wrapper = new Wrapper<T>();
        wrapper.array = array;
        return JsonUtility.ToJson(wrapper);
    }

    [System.Serializable]
    private class Wrapper<T>
    {
        public T[] array;
    }
}
 
 